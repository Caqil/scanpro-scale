generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(cuid())
  name              String?
  email             String?       @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              String        @default("user")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  isEmailVerified   Boolean       @default(false)
  verificationToken String?
  accounts          Account[]
  apiKeys           ApiKey[]
  sessions          Session[]
  subscription      Subscription?
  usageStats        UsageStats[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model Subscription {
  id                  String    @id @default(cuid())
  userId              String    @unique
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tier                String    @default("free")
  status              String    @default("active")
  currentPeriodStart  DateTime  @default(now())
  currentPeriodEnd    DateTime?
  canceledAt          DateTime?
  paypalSubscriptionId String?
  paypalPlanId        String?
  
  // Add these new fields
  lastPaymentDate     DateTime?
  nextBillingDate     DateTime?
  failedPaymentCount  Int       @default(0)
  usageResetDate      DateTime  @default(now())
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

// Only include this if it doesn't already exist
// If it exists, make sure it has all these fields
model UsageStats {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  operation String
  count     Int      @default(0)
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, operation, date])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ApiKey {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  key         String    @unique
  permissions String[]  // List of allowed operations: ["convert", "compress", "merge", etc.] or ["*"] for all
  lastUsed    DateTime?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
}

model PaymentWebhookEvent {
  id           String   @id @default(cuid())
  eventId      String   @unique
  eventType    String
  resourceType String
  resourceId   String
  status       String   @default("processed")
  rawData      String
  processedAt  DateTime @default(now())
  createdAt    DateTime @default(now())
}
