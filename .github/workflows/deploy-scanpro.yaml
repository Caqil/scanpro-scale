name: Deploy ScanPro to Kubernetes

on:
  push:
    branches: [main]
    paths-ignore:
      - "README.md"
      - ".github/workflows/*.yml"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - staging
          - production

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: caqil/scanpro-frontend

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json

      - name: Install Dependencies
        run: npm ci
        working-directory: ./app

      - name: Build Next.js Application
        run: npm run build
        working-directory: ./app
        env:
          NODE_ENV: production

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Kubernetes
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Configure Kubernetes Access
        run: |
          # Create kubeconfig directory
          mkdir -p ~/.kube
          
          # Decode the KUBE_CONFIG and save it
          echo "${{ secrets.KUBE_CONFIG_B64 }}" | base64 -d > ~/.kube/config
          
          # Ensure correct permissions
          chmod 600 ~/.kube/config
          
          # Validate the connection to the cluster
          kubectl cluster-info
          kubectl get nodes

      - name: Update Deployment Image
        run: |
          # Set image tag from commit SHA
          IMAGE_TAG="sha-${GITHUB_SHA::7}"
          echo "Using image tag: $IMAGE_TAG"
          
          # Update the deployment with the new image
          kubectl set image deployment/scanpro -n scanpro scanpro=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG
          
          # Wait for rollout to complete
          kubectl rollout status deployment/scanpro -n scanpro --timeout=300s
          echo "Deployment updated successfully!"

      - name: Run Database Migrations
        run: |
          # Set image tag from commit SHA
          IMAGE_TAG="sha-${GITHUB_SHA::7}"
          
          # Create a temporary pod for migrations
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Pod
          metadata:
            name: scanpro-migrations
            namespace: scanpro
          spec:
            restartPolicy: Never
            containers:
            - name: migrations
              image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG
              command: ["sh", "-c", "cd /app && npx prisma migrate deploy"]
              env:
              - name: DATABASE_URL
                valueFrom:
                  secretKeyRef:
                    name: scanpro-secret
                    key: DATABASE_URL
          EOF
          
          # Wait for the pod to start
          kubectl wait --for=condition=Ready pod/scanpro-migrations -n scanpro --timeout=60s || true
          
          # Give the migration some time to run
          sleep 20
          
          # Show migration logs
          kubectl logs scanpro-migrations -n scanpro
          
          # Clean up the migration pod
          kubectl delete pod scanpro-migrations -n scanpro --ignore-not-found

      - name: Verify Deployment
        run: |
          echo "Deployment status:"
          kubectl get deployment scanpro -n scanpro -o wide
          
          echo "Pod status:"
          kubectl get pods -n scanpro -l app=scanpro
          
          echo "Service status:"
          kubectl get svc -n scanpro
          
          echo "Ingress status:"
          kubectl get ingress -n scanpro

  notify:
    name: Send Deployment Notification
    needs: deploy
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Send Slack notification on success
        if: ${{ needs.deploy.result == 'success' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_TITLE: "✅ ScanPro Deployment Successful"
          SLACK_MESSAGE: "ScanPro has been deployed to ${{ github.event.inputs.environment || 'production' }}."
          SLACK_COLOR: good

      - name: Send Slack notification on failure
        if: ${{ needs.deploy.result != 'success' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_TITLE: "❌ ScanPro Deployment Failed"
          SLACK_MESSAGE: "Deployment to ${{ github.event.inputs.environment || 'production' }} failed. Please check the logs."
          SLACK_COLOR: danger